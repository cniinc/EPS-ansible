---
# Operation EPS - PhotoPrism/Immich Timing Coordination Playbook
# Manages processing windows between PhotoPrism (22-23 hours) and Immich (1-2 hours)

- name: "Operation EPS - Manage PhotoPrism/Immich Processing Coordination"
  hosts: photos #my LXC name
  become: yes
  vars:
    # Template Variables Required:
    # - action (string): Coordination action to perform
    #   Valid options: status, start_immich, stop_immich, start_photoprism, stop_photoprism, schedule, cleanup
    # - immich_api_key (string): API key for Immich authentication (from Semaphore template variable)
    
    # Docker Compose Paths
    immich_compose_path: "/opt/stacks/immich"
    photoprism_compose_path: "/opt/stacks/photoprism"
    
    # Timing Configuration  
    immich_processing_start: "11:00"
    immich_processing_end: "13:00"
    photoprism_processing_start: "13:05"
    photoprism_processing_end: "10:55"

    # Network and API Configuration
    immich_base_url: "http://192.168.50.130:2283"

    # Valid action list for validation
    valid_actions:
      - status
      - start_immich
      - stop_immich
      - start_photoprism
      - stop_photoprism
      - schedule
      - cleanup
    action: 'status'

  tasks:
    # =============================================================================
    # INPUT VALIDATION
    # =============================================================================

    - name: "Validate required variables"
      block:
        - name: "Display coordination action"
          ansible.builtin.debug:
            msg: "üéØ Operation EPS Coordination - Action: {{ action }}"
          
        - name: "Validate action value"
          ansible.builtin.fail:
            msg: |
              ERROR: Invalid action '{{ action }}' provided.
              
              Valid actions are: {{ valid_actions | join(', ') }}
              
              You provided: '{{ action }}'
          when: action not in valid_actions
          
        - name: "Check if API key is configured"
          ansible.builtin.fail:
            msg: |
              ERROR: 'immich_api_key' variable is required but not configured.
              
              This variable should be set in your Semaphore template variables.
              The API key is needed to control Immich processing via REST API.
          when: immich_api_key is not defined or immich_api_key == ""
          


    # =============================================================================
    # IMMICH PROCESSING CONTROL (USING JOB ENDPOINTS)
    # =============================================================================
    
    - name: "Start Immich Processing Window"
      block:
        - name: "Get current Immich system config"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: GET
            headers:
              X-API-Key: "{{ immich_api_key }}"
          register: immich_current_config
          
        - name: "Update Immich to high processing mode"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: PUT
            body_format: json
            body: "{{ immich_current_config.json | combine({'job': {'backgroundTask': {'concurrency': 4}, 'thumbnailGeneration': {'concurrency': 4}, 'metadataExtraction': {'concurrency': 4}, 'videoConversion': {'concurrency': 2}, 'smartSearch': {'concurrency': 2}}}, recursive=True) }}"
            headers:
              Content-Type: "application/json"
              X-API-Key: "{{ immich_api_key }}"
          register: immich_start_result
          
        - name: "Log Immich processing start"
          ansible.builtin.debug:
            msg: "‚úÖ Immich processing window started at {{ ansible_date_time.time }} - High concurrency enabled"
            
      when: action == "start_immich"
      
    - name: "Stop Immich Processing Window"
      block:
        - name: "Get current Immich system config"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: GET
            headers:
              X-API-Key: "{{ immich_api_key }}"
          register: immich_current_config
          
        - name: "Update Immich to low processing mode"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: PUT
            body_format: json
            body: "{{ immich_current_config.json | combine({'job': {'backgroundTask': {'concurrency': 1}, 'thumbnailGeneration': {'concurrency': 1}, 'metadataExtraction': {'concurrency': 1}, 'videoConversion': {'concurrency': 1}, 'smartSearch': {'concurrency': 1}}}, recursive=True) }}"
            headers:
              Content-Type: "application/json"
              X-API-Key: "{{ immich_api_key }}"
          register: immich_low_result
          
        - name: "Log Immich processing stop"
          ansible.builtin.debug:
            msg: "üîÑ Immich processing window ended at {{ ansible_date_time.time }} - Low concurrency enabled"
            
      when: action == "stop_immich"

    # =============================================================================
    # PHOTOPRISM PROCESSING CONTROL
    # =============================================================================
    
    - name: "Start PhotoPrism Processing Window"
      block:
        - name: "Enable PhotoPrism indexing"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism photoprism index --cleanup
          register: photoprism_index_result
          async: 3600  # Allow up to 1 hour for indexing
          poll: 0      # Don't wait for completion
          
        - name: "Start PhotoPrism background tasks"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism photoprism optimize
          register: photoprism_optimize_result
          async: 1800  # Allow 30 minutes for optimization
          poll: 0
          
        - name: "Log PhotoPrism processing start"
          ansible.builtin.debug:
            msg: "üéØ PhotoPrism processing window started at {{ ansible_date_time.time }}"
            
      when: action == "start_photoprism"
      
    - name: "Stop PhotoPrism Processing Window"
      block:
        - name: "Send graceful shutdown signal to PhotoPrism processes"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism pkill -TERM photoprism || true
          register: photoprism_stop_result
          
        - name: "Wait for PhotoPrism processes to complete current tasks"
          ansible.builtin.pause:
            seconds: 30
            
        - name: "Log PhotoPrism processing stop"
          ansible.builtin.debug:
            msg: "‚è∏Ô∏è PhotoPrism processing window ended at {{ ansible_date_time.time }}"
            
      when: action == "stop_photoprism"

    # =============================================================================
    # MONITORING AND STATUS (SIMPLIFIED - NO PING)
    # =============================================================================
    
    - name: "Check Processing Status"
      block:
        - name: "Get Immich system config (tests API auth and connectivity)"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: GET
            headers:
              X-API-Key: "{{ immich_api_key }}"
            timeout: 10
          register: immich_config
          ignore_errors: yes
          
        - name: "Get Immich container status"
          ansible.builtin.shell: |
            cd {{ immich_compose_path }}
            docker compose ps immich-server --format "table {{'{{'}}{{'.Name'}}{{'}}'}}\t{{'{{'}}{{'.Status'}}{{'}}'}}"
          register: immich_container_status
          ignore_errors: yes
          
        - name: "Get PhotoPrism container status"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose ps photoprism --format "table {{'{{'}}{{'.Name'}}{{'}}'}}\t{{'{{'}}{{'.Status'}}{{'}}'}}"
          register: photoprism_status
          ignore_errors: yes
          
        - name: "Display current processing status"
          ansible.builtin.debug:
            msg: |
              üìä Current Processing Status:
              
              üéØ Immich API: {{ 'Online & Authenticated' if immich_config.status is defined and immich_config.status == 200 else 'Offline or Auth Failed' }}
              üéØ Immich Container: {{ 'Running' if immich_container_status.stdout is defined and 'Up' in immich_container_status.stdout else 'Unknown' }}
              üì∏ PhotoPrism Container: {{ 'Running' if photoprism_status.stdout is defined and 'Up' in photoprism_status.stdout else 'Unknown' }}
              
              üîë API Key Status: {{ 'Configured' if immich_api_key != 'YOUR_ACTUAL_API_KEY_HERE' else 'NEEDS REPLACEMENT' }}
              üåê Target URL: {{ immich_base_url }}
              ‚è∞ Time: {{ ansible_date_time.time }}
              
      when: action == "status"

    # =============================================================================
    # SCHEDULE INFORMATION (USE SEMAPHORE SCHEDULES INSTEAD)
    # =============================================================================
    
    - name: "Display Schedule Instructions"
      block:
        - name: "Show Semaphore schedule setup instructions"
          ansible.builtin.debug:
            msg: |
              üìÖ EPS Processing Schedule Setup Instructions:
              
              Create these 4 schedules in Semaphore Web Interface:
              
              üü¢ Schedule 1: "EPS Start Immich"
              ‚îú‚îÄ‚îÄ Template: EPS Coordination
              ‚îú‚îÄ‚îÄ Cron: 0 11 * * * (Daily at 11:00 AM)
              ‚îî‚îÄ‚îÄ Variables: action = start_immich
              
              üî¥ Schedule 2: "EPS Stop Immich"
              ‚îú‚îÄ‚îÄ Template: EPS Coordination  
              ‚îú‚îÄ‚îÄ Cron: 0 13 * * * (Daily at 1:00 PM)
              ‚îî‚îÄ‚îÄ Variables: action = stop_immich
              
              üü¢ Schedule 3: "EPS Start PhotoPrism"
              ‚îú‚îÄ‚îÄ Template: EPS Coordination
              ‚îú‚îÄ‚îÄ Cron: 5 13 * * * (Daily at 1:05 PM)
              ‚îî‚îÄ‚îÄ Variables: action = start_photoprism
              
              üî¥ Schedule 4: "EPS Stop PhotoPrism"
              ‚îú‚îÄ‚îÄ Template: EPS Coordination
              ‚îú‚îÄ‚îÄ Cron: 55 10 * * * (Daily at 10:55 AM)
              ‚îî‚îÄ‚îÄ Variables: action = stop_photoprism
              
              ‚ö° Processing Windows:
              üì± Immich: {{ immich_processing_start }} - {{ immich_processing_end }} (2 hours)
              üéØ PhotoPrism: {{ photoprism_processing_start }} - {{ photoprism_processing_end }} (22h 50m)
              
              ‚úÖ All scheduling stays within Semaphore - no external cron jobs!
              
      when: action == "schedule"

    # =============================================================================
    # CLEANUP AND MAINTENANCE
    # =============================================================================
    
    - name: "Remove Processing Coordination"
      block:
        - name: "Display cleanup instructions"
          ansible.builtin.debug:
            msg: |
              üßπ EPS Coordination Cleanup Instructions:
              
              To fully remove EPS coordination:
              1. Delete the 4 Semaphore schedules from the web interface:
                 ‚Ä¢ EPS Start Immich
                 ‚Ä¢ EPS Stop Immich  
                 ‚Ä¢ EPS Start PhotoPrism
                 ‚Ä¢ EPS Stop PhotoPrism
              
              2. Optionally delete this EPS Coordination template
              
              ‚úÖ No external cron jobs or scripts to clean up!
              
      when: action == "cleanup"

# =============================================================================
# OPERATION EPS COORDINATION SUMMARY
# =============================================================================
# 
# Processing Windows:
# ‚îú‚îÄ‚îÄ Immich: 11:00 AM - 1:00 PM (2 hours)
# ‚îÇ   ‚îú‚îÄ‚îÄ High concurrency mobile backup processing (4 workers)
# ‚îÇ   ‚îú‚îÄ‚îÄ Peak mobile usage time coverage
# ‚îÇ   ‚îú‚îÄ‚îÄ Quick thumbnail generation
# ‚îÇ   ‚îî‚îÄ‚îÄ Video conversion (2 workers)
# ‚îî‚îÄ‚îÄ PhotoPrism: 1:10 PM - 10:50 AM (22h 50m)
#     ‚îú‚îÄ‚îÄ Intensive AI processing
#     ‚îú‚îÄ‚îÄ Facial recognition and object detection  
#     ‚îú‚îÄ‚îÄ Metadata generation and indexing
#     ‚îú‚îÄ‚îÄ Advanced search index building
#     ‚îî‚îÄ‚îÄ Photo optimization
#
# Network Configuration:
# ‚îú‚îÄ‚îÄ Semaphore: 192.168.50.102 (orchestrator)
# ‚îú‚îÄ‚îÄ Photos LXC: 192.168.50.130 (Immich + PhotoPrism)
# ‚îî‚îÄ‚îÄ API Calls: Cross-container via IP addresses
#
# Usage Examples:
# ‚îú‚îÄ‚îÄ Check status: action="status"
# ‚îú‚îÄ‚îÄ Test Immich start: action="start_immich"
# ‚îú‚îÄ‚îÄ Test Immich stop: action="stop_immich"
# ‚îú‚îÄ‚îÄ Deploy schedule: action="schedule"
# ‚îî‚îÄ‚îÄ Remove coordination: action="cleanup"
#
# Prerequisites:
# ‚îú‚îÄ‚îÄ Immich API key configured in vars
# ‚îú‚îÄ‚îÄ Network connectivity between containers
# ‚îú‚îÄ‚îÄ Docker compose services running
# ‚îî‚îÄ‚îÄ Semaphore template configured
# =============================================================================