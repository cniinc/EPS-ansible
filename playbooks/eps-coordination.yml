---
# Operation EPS - PhotoPrism/Immich Timing Coordination Playbook
# Manages processing windows between PhotoPrism (22-23 hours) and Immich (1-2 hours)

- name: "Operation EPS - Manage PhotoPrism/Immich Processing Coordination"
  hosts: photos #my LXC name
  become: yes
  vars:
    # Docker Compose Paths
    immich_compose_path: "/opt/stacks/immich"
    photoprism_compose_path: "/opt/stacks/photoprism"
    
    # Timing Configuration  
    immich_processing_start: "11:00"
    immich_processing_end: "13:00"
    photoprism_processing_start: "13:05"
    photoprism_processing_end: "10:55"

    # Network and API Configuration
    immich_api_key: "DZ0bD4O3Q6xXRU1gCL89qO9boBdmZ86Xbpj8EXZdR8"  # Replace with your actual API key
    immich_base_url: "http://192.168.50.130:2283"

    # Processing Control
    action:  "{{ action | default('status') }}"  # Options: status, start_immich, stop_immich, start_photoprism, stop_photoprism

  tasks:
    # =============================================================================
    # IMMICH PROCESSING CONTROL (WITH NETWORK & AUTHENTICATION)
    # =============================================================================
    
    - name: "Start Immich Processing Window"
      block:
        - name: "Enable Immich background jobs via API"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: PUT
            body_format: json
            body:
              job:
                backgroundTask:
                  concurrency: 4
                thumbnailGeneration:
                  concurrency: 4
                metadataExtraction:
                  concurrency: 4
                videoConversion:
                  concurrency: 2
                smartSearch:
                  concurrency: 2
            headers:
              Content-Type: "application/json"
              X-API-Key: "{{ immich_api_key }}"
          register: immich_start_result
          
        - name: "Log Immich processing start"
          ansible.builtin.debug:
            msg: "‚úÖ Immich processing window started at {{ ansible_date_time.time }} - High concurrency enabled"
            
      when: action == "start_immich"
      
    - name: "Stop Immich Processing Window"
      block:
        - name: "Set Immich to low processing mode via API"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: PUT
            body_format: json
            body:
              job:
                backgroundTask:
                  concurrency: 1
                thumbnailGeneration:
                  concurrency: 1
                metadataExtraction:
                  concurrency: 1
                videoConversion:
                  concurrency: 1
                smartSearch:
                  concurrency: 1
            headers:
              Content-Type: "application/json"
              X-API-Key: "{{ immich_api_key }}"
          register: immich_low_result
          
        - name: "Pause Immich background jobs via API"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/system-config"
            method: PUT
            body_format: json
            body:
              job:
                backgroundTask:
                  concurrency: 0
            headers:
              Content-Type: "application/json"
              X-API-Key: "{{ immich_api_key }}"
          register: immich_pause_result
          
        - name: "Log Immich processing stop"
          ansible.builtin.debug:
            msg: "üîÑ Immich processing window ended at {{ ansible_date_time.time }} - Jobs paused"
            
      when: action == "stop_immich"

    # =============================================================================
    # PHOTOPRISM PROCESSING CONTROL
    # =============================================================================
    
    - name: "Start PhotoPrism Processing Window"
      block:
        - name: "Enable PhotoPrism indexing"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism photoprism index --cleanup
          register: photoprism_index_result
          async: 3600  # Allow up to 1 hour for indexing
          poll: 0      # Don't wait for completion
          
        - name: "Start PhotoPrism background tasks"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism photoprism optimize
          register: photoprism_optimize_result
          async: 1800  # Allow 30 minutes for optimization
          poll: 0
          
        - name: "Log PhotoPrism processing start"
          ansible.builtin.debug:
            msg: "üéØ PhotoPrism processing window started at {{ ansible_date_time.time }}"
            
      when: action == "start_photoprism"
      
    - name: "Stop PhotoPrism Processing Window"
      block:
        - name: "Send graceful shutdown signal to PhotoPrism processes"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose exec -T photoprism pkill -TERM photoprism || true
          register: photoprism_stop_result
          
        - name: "Wait for PhotoPrism processes to complete current tasks"
          ansible.builtin.pause:
            seconds: 30
            
        - name: "Log PhotoPrism processing stop"
          ansible.builtin.debug:
            msg: "‚è∏Ô∏è PhotoPrism processing window ended at {{ ansible_date_time.time }}"
            
      when: action == "stop_photoprism"

    # =============================================================================
    # MONITORING AND STATUS (WITH NETWORK & AUTHENTICATION)
    # =============================================================================
    
    - name: "Check Processing Status"
      block:
        - name: "Get Immich server status via API"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/server-info"
            method: GET
            headers:
              X-API-Key: "{{ immich_api_key }}"
            timeout: 10
          register: immich_status
          ignore_errors: yes
          
        - name: "Get Immich job queue status"
          ansible.builtin.uri:
            url: "{{ immich_base_url }}/api/jobs"
            method: GET
            headers:
              X-API-Key: "{{ immich_api_key }}"
          register: immich_jobs_status
          ignore_errors: yes
          
        - name: "Alternative Immich status check via container"
          ansible.builtin.shell: |
            cd {{ immich_compose_path }}
            docker compose ps immich-server --format "table {{.Status}}"
          register: immich_container_status
          ignore_errors: yes
          
        - name: "Get PhotoPrism status"
          ansible.builtin.shell: |
            cd {{ photoprism_compose_path }}
            docker compose ps photoprism
          register: photoprism_status
          
        - name: "Display current processing status"
          ansible.builtin.debug:
            msg: |
              üìä Current Processing Status:
              
              üéØ Immich API: {{ 'Online' if immich_status.status == 200 else 'Unreachable (' + (immich_status.status|string) + ')' if immich_status.status is defined else 'Connection Failed' }}
              üéØ Immich Container: {{ 'Running' if 'Up' in immich_container_status.stdout else 'Stopped' }}
              üéØ Immich Jobs: {{ 'Available' if immich_jobs_status.status == 200 else 'Unavailable' }}
              üì∏ PhotoPrism: {{ 'Running' if 'Up' in photoprism_status.stdout else 'Stopped' }}
              
              ‚è∞ Time: {{ ansible_date_time.time }}
              
      when: action == "status"

    # =============================================================================
    # CRON SCHEDULE MANAGEMENT (USING SEMAPHORE)
    # =============================================================================
    
    - name: "Install Processing Coordination Cron Jobs"
      block:
        - name: "Create EPS coordination script directory"
          ansible.builtin.file:
            path: /opt/eps-coordination
            state: directory
            owner: root
            group: root
            mode: '0755'
            
        - name: "Create Semaphore API coordination script"
          ansible.builtin.copy:
            dest: /opt/eps-coordination/run-semaphore-task.sh
            content: |
              #!/bin/bash
              # Semaphore API Task Trigger Script
              # Usage: ./run-semaphore-task.sh <action>
              
              ACTION=$1
              SEMAPHORE_URL="http://192.168.50.102:3000"
              PROJECT_ID="2"  # Your project ID
              TEMPLATE_ID="2"  # Your EPS Coordination template ID
              
              # You may need to add authentication here if required
              curl -X POST \
                "${SEMAPHORE_URL}/api/project/${PROJECT_ID}/tasks" \
                -H "Content-Type: application/json" \
                -d '{
                  "template_id": "'${TEMPLATE_ID}'",
                  "environment": {"action": "'${ACTION}'"}
                }'
            mode: '0755'
            
        - name: "Create Immich start script"
          ansible.builtin.copy:
            dest: /opt/eps-coordination/start-immich.sh
            content: |
              #!/bin/bash
              /opt/eps-coordination/run-semaphore-task.sh start_immich
            mode: '0755'
            
        - name: "Create Immich stop script"
          ansible.builtin.copy:
            dest: /opt/eps-coordination/stop-immich.sh
            content: |
              #!/bin/bash
              /opt/eps-coordination/run-semaphore-task.sh stop_immich
            mode: '0755'
            
        - name: "Create PhotoPrism start script"
          ansible.builtin.copy:
            dest: /opt/eps-coordination/start-photoprism.sh
            content: |
              #!/bin/bash
              /opt/eps-coordination/run-semaphore-task.sh start_photoprism
            mode: '0755'
            
        - name: "Create PhotoPrism stop script"
          ansible.builtin.copy:
            dest: /opt/eps-coordination/stop-photoprism.sh
            content: |
              #!/bin/bash
              /opt/eps-coordination/run-semaphore-task.sh stop_photoprism
            mode: '0755'
            
        - name: "Schedule Immich processing window start"
          ansible.builtin.cron:
            name: "EPS - Start Immich Processing"
            minute: "0"
            hour: "11"
            job: "/opt/eps-coordination/start-immich.sh"
            user: root
            
        - name: "Schedule Immich processing window end"
          ansible.builtin.cron:
            name: "EPS - Stop Immich Processing"
            minute: "0"
            hour: "13"
            job: "/opt/eps-coordination/stop-immich.sh"
            user: root
            
        - name: "Schedule PhotoPrism processing window start"
          ansible.builtin.cron:
            name: "EPS - Start PhotoPrism Processing"
            minute: "5"
            hour: "13"
            job: "/opt/eps-coordination/start-photoprism.sh"
            user: root
            
        - name: "Schedule PhotoPrism processing window end"
          ansible.builtin.cron:
            name: "EPS - Stop PhotoPrism Processing"
            minute: "55"
            hour: "10"
            job: "/opt/eps-coordination/stop-photoprism.sh"
            user: root
            
        - name: "Log cron installation"
          ansible.builtin.debug:
            msg: |
              ‚è∞ EPS Processing Schedule Installed:
              üì± Immich Window: {{ immich_processing_start }} - {{ immich_processing_end }} (Mobile backup priority)
              üéØ PhotoPrism Window: {{ photoprism_processing_start }} - {{ photoprism_processing_end }} (AI processing)
              
              üìã Cron Schedule:
              ‚Ä¢ 11:00 AM - Start Immich processing (high concurrency)
              ‚Ä¢ 1:00 PM - Stop Immich processing (pause jobs)
              ‚Ä¢ 1:05 PM - Start PhotoPrism processing (indexing + AI)
              ‚Ä¢ 10:55 AM - Stop PhotoPrism processing (graceful shutdown)
              
      when: action == "schedule"

    # =============================================================================
    # CLEANUP AND MAINTENANCE
    # =============================================================================
    
    - name: "Remove Processing Coordination"
      block:
        - name: "Remove all EPS cron jobs"
          ansible.builtin.cron:
            name: "{{ item }}"
            state: absent
          loop:
            - "EPS - Start Immich Processing"
            - "EPS - Stop Immich Processing"
            - "EPS - Start PhotoPrism Processing"
            - "EPS - Stop PhotoPrism Processing"
            
        - name: "Remove coordination scripts"
          ansible.builtin.file:
            path: /opt/eps-coordination
            state: absent
            
        - name: "Log cleanup completion"
          ansible.builtin.debug:
            msg: "üßπ EPS processing coordination removed"
            
      when: action == "cleanup"

# =============================================================================
# OPERATION EPS COORDINATION SUMMARY
# =============================================================================
# 
# Processing Windows:
# ‚îú‚îÄ‚îÄ Immich: 11:00 AM - 1:00 PM (2 hours)
# ‚îÇ   ‚îú‚îÄ‚îÄ High concurrency mobile backup processing (4 workers)
# ‚îÇ   ‚îú‚îÄ‚îÄ Peak mobile usage time coverage
# ‚îÇ   ‚îú‚îÄ‚îÄ Quick thumbnail generation
# ‚îÇ   ‚îî‚îÄ‚îÄ Video conversion (2 workers)
# ‚îî‚îÄ‚îÄ PhotoPrism: 1:05 PM - 10:55 AM (22h 50m)
#     ‚îú‚îÄ‚îÄ Intensive AI processing
#     ‚îú‚îÄ‚îÄ Facial recognition and object detection  
#     ‚îú‚îÄ‚îÄ Metadata generation and indexing
#     ‚îú‚îÄ‚îÄ Advanced search index building
#     ‚îî‚îÄ‚îÄ Photo optimization
#
# Network Configuration:
# ‚îú‚îÄ‚îÄ Semaphore: 192.168.50.102 (orchestrator)
# ‚îú‚îÄ‚îÄ Photos LXC: 192.168.50.130 (Immich + PhotoPrism)
# ‚îî‚îÄ‚îÄ API Calls: Cross-container via IP addresses
#
# Usage Examples:
# ‚îú‚îÄ‚îÄ Check status: action="status"
# ‚îú‚îÄ‚îÄ Test Immich start: action="start_immich"
# ‚îú‚îÄ‚îÄ Test Immich stop: action="stop_immich"
# ‚îú‚îÄ‚îÄ Deploy schedule: action="schedule"
# ‚îî‚îÄ‚îÄ Remove coordination: action="cleanup"
#
# Prerequisites:
# ‚îú‚îÄ‚îÄ Immich API key configured in vars
# ‚îú‚îÄ‚îÄ Network connectivity between containers
# ‚îú‚îÄ‚îÄ Docker compose services running
# ‚îî‚îÄ‚îÄ Semaphore template configured
# =============================================================================